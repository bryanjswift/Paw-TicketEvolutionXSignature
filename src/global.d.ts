declare type RuntimeInfoTask =
  | "requestSend"
  | "dynamicValuePreview"
  | "codeGenerationPreview"
  | "codeGenerationCopyToClipboard"
  | "export"
  | "stringCopyToClipboard";

declare type HttpMethod =
  | "GET"
  | "HEAD"
  | "POST"
  | "PUT"
  | "PATCH"
  | "DELETE"
  | "TRACE"
  | "OPTIONS";

declare function registerDynamicValueClass(o: any): void;

declare function DynamicValueInput(
  key: string,
  label: string,
  valueType: string
): void;

declare class DynamicValue {
  constructor(valueType: string, options: any);
  getEvaluatedString(): string;
}

declare interface BasicAuthConfiguration {
  username: string;
  password: string;
}

declare interface Headers {
  [name: string]: string;
}

/**
 * Represents a group of `Request` instances like it is shown in the "Requests"
 * view.
 * @see https://paw.cloud/docs/reference/RequestGroup
 */
declare interface RequestGroup {
  /**
   * The unique identifier (UUID).
   */
  readonly id: string;
  /**
   * The name of the `RequestGroup` as it is shown in the "Requests" view.
   */
  name: string;
  /**
   * The order of the RequestGroup in its parent RequestGroup or as a root item
   * (orders starts at 0).
   */
  order: number;
  /**
   * The parent `RequestGroup` if any, otherwise `null`.
   */
  parent: RequestGroup | null;
  /**
   * Returns all child items (either request or group) as an array of `Request`
   * and `RequestGroup` objects.
   */
  getChildren(): Array<Request | RequestGroup>;
  /**
   * @returns all child requests, as an array of `Request` objects.
   */
  getChildRequests(): Request[];
  /**
   * @returns all child request groups, as an array of `RequestGroup` objects.
   */
  getChildGroups(): RequestGroup[];
  /**
   * Modifies the current RequestGroup by adding the `child` as its last child.
   * Only available for importers.
   * @param child to append to the end of this group.
   */
  appendChild(child: Request | RequestGroup): void;
  /**
   * Insert the `child` as its child at the given `index`. Only available for
   * importers.
   * @param child to insert into this group.
   * @param index from 0 where the child will be inserted.
   */
  insertChild(child: Request | RequestGroup, index: number): void;
}

/**
 * @see https://paw.cloud/docs/reference/Request
 */
declare interface Request {
  /**
   * The request unique identifier, an UUID generated by Paw for each request.
   */
  readonly id: string;
  /**
   * The request name as it is shown in the requests view.
   */
  readonly name: string;
  /**
   * The request description as shown in the requests view.
   */
  readonly description: string;
  /**
   * The order of the request in its parent RequestGroup or as a root item
   * (orders starts at 0).
   */
  readonly order: number;
  /**
   * The parent `RequestGroup` if one exists, `null` otherwise.
   */
  readonly parent: RequestGroup | null;
  /**
   * The URL of the request.
   */
  readonly url: string;
  /**
   * The URL of the request excluding query params (everything up to the first ?).
   */
  readonly urlBase: string;
  /**
   * The query part of the URL of the request (everything after the first ?).
   * Returns an empty string if there's no query string.
   */
  readonly urlQuery: string;
  /**
   * The method of the request.
   */
  readonly method: HttpMethod;
  /**
   * Returns an object (dictionary) pairing the request's headers values to
   * their names. Header values are returned as plain strings. The getter
   * method `getHeaders` is also availalble. Writable only for importers.
   */
  headers: Headers;
  /**
   * Returns the request HTTP Basic Auth configuration, if any, as an object
   * (dictionary) with the "username" and "password" keys containing strings. The
   * getter method getHttpBasicAuth() is also available.
   */
  httpBasicAuth: BasicAuthConfiguration | null;
  /**
   * The body of the request.
   */
  readonly body: string;
  /**
   * The request body as an object (dictionary or array), when it uses the JSON
   * body format.
   */
  readonly jsonBody: object;
  getMethod(): HttpMethod;
  getUrl(): string;
  getUrlParametersNames(): string[];
  getUrlParametersByName(name: string): string;
  getHeadersNames(): string[];
  getHeadersByName(name: string): string;
  addHeader(name: string, value: string): void;
  setHeader(name: string, value: string): void;
}

/**
 * @see https://paw.cloud/docs/reference/RuntimeInfo
 */
declare interface RuntimeInfo {
  /**
   * @returns the task that is currently being executed
   */
  readonly task: RuntimeInfoTask;
  /**
   * Whether the JavaScript execution is happening on the application's main
   * thread (aka. UI thread). In most cases, Paw makes the JavaScript execution
   * happen in the background to keep the application responsive at all times.
   * But in rare cases, when macOS requires a synchronous result, the execution
   * can happen on the main thread (e.g. user copies a dynamic value,
   * drag-and-drop). In such cases, it's recommended to avoid doing heavy
   * computations.
   */
  readonly isMainThread: boolean;
}

/**
 * @see https://paw.cloud/docs/reference/ExtensionContext
 */
declare interface Context {
  /**
   * Gives access to the current runtime information of this JS context.
   */
  runtimeInfo: RuntimeInfo;
  /**
   * Whether the context is mutable (if we can use setters, and
   * creation/update/delete methods). `true` only for Importers.
   */
  allowsMutation: boolean;
  /**
   * @returns the current Request.
   */
  getCurrentRequest(): Request;
  /**
   * Access a specific `Request` based on it's name.
   * @param name of the request to retrieve.
   * @returns the `Request` referenced by `name` or `null` if one does not
   * exist.
   */
  getRequestByName(name: string): Request | null;
}
