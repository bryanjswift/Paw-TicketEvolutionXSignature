declare type RuntimeInfoTask = 'requestSend' | 'dynamicValuePreview' | 'codeGenerationPreview' | 'codeGenerationCopyToClipboard' | 'export' | 'stringCopyToClipboard';

declare type HttpMethod = 'GET' | 'HEAD' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'TRACE' | 'OPTIONS';

declare function registerDynamicValueClass(o: any): void;

declare function DynamicValueInput(key: string, label: string, valueType: string): void;

declare class DynamicValue {
  constructor(valueType: string, options: any);
  getEvaluatedString(): string;
}

/**
 * @see https://paw.cloud/docs/reference/Request
 */
declare interface Request {
  /**
   * The request unique identifier, an UUID generated by Paw for each request.
   */
  readonly id: string;
  /**
   * The request name as it is shown in the requests view.
   */
  readonly name: string;
  /**
   * The request description as shown in the requests view.
   */
  readonly description: string;
  /**
   * The order of the request in its parent RequestGroup or as a root item
   * (orders starts at 0).
   */
  readonly order: number;
  /**
   * The URL of the request.
   */
  readonly url: string;
  /**
   * The URL of the request excluding query params (everything up to the first ?).
   */
  readonly urlBase: string;
  /**
   * The query part of the URL of the request (everything after the first ?).
   * Returns an empty string if there's no query string.
   */
  readonly urlQuery: string;
  /**
   * The method of the request.
   */
  readonly method: HttpMethod;
  getMethod(): HttpMethod;
  getUrl(): string;
  getUrlParametersNames(): string[];
  getUrlParametersByName(name: string): string;
  getHeadersNames(): string[];
  getHeadersByName(name: string): string;
  addHeader(name: string, value: string): void;
  setHeader(name: string, value: string): void;
}

/**
 * @see https://paw.cloud/docs/reference/RuntimeInfo
 */
declare interface RuntimeInfo {
  /**
   * @returns the task that is currently being executed
   */
  readonly task: RuntimeInfoTask;
  /**
   * Whether the JavaScript execution is happening on the application's main
   * thread (aka. UI thread). In most cases, Paw makes the JavaScript execution
   * happen in the background to keep the application responsive at all times.
   * But in rare cases, when macOS requires a synchronous result, the execution
   * can happen on the main thread (e.g. user copies a dynamic value,
   * drag-and-drop). In such cases, it's recommended to avoid doing heavy
   * computations.
   */
  readonly isMainThread: boolean;
}

/**
 * @see https://paw.cloud/docs/reference/ExtensionContext
 */
declare interface Context {
  /**
   * Gives access to the current runtime information of this JS context.
   */
  runtimeInfo: RuntimeInfo;
  /**
   * Whether the context is mutable (if we can use setters, and
   * creation/update/delete methods). `true` only for Importers.
   */
  allowsMutation: boolean;
  /**
   * @returns the current Request.
   */
  getCurrentRequest(): Request;
}
